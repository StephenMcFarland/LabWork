  //I know I've done this one before, hackerrank doesn't keep track? find the maximum difference between a given number
  // and an array of numbers, if greater than all numbers return 0
   public static int hurdleRace(int k, List<Integer> height) {
    // Write your code here
    int dose = 0;
    int max = 0;
    
            for(int i=0;i<height.size();i++){
                if(k-height.get(i)<0){
                    dose = Math.abs(k-height.get(i));
                    //if(dose>max)max=dose;
                    
                }else{
                    dose = 0;
                }
                max = Math.max(dose,max);
                
            }
            return max;
    }
    
    
    
  //return the largest subarray with a difference no greater than 1 between each element
  //initially I thought to sort the array but didn't, start the count at 1, I had most of the logic
  
  
  public static int pickingNumbers(List<Integer> a) {
    // Write your code here
    List<Integer> b = new ArrayList<Integer>();
    // int count = 0;
    // int largestsub = 0;
    
    // for(int i=0;i<a.size()-1;i++){
    //     for(int j=i;j<a.size()-1;j++){
    // if(Math.abs(a.get(j)-a.get(j+1))<=1){
    //     count++;
        //b.add(a.get(j));
    //     if(j==a.size()-1){
    //         count++;
    //         //b.add(a.get(a.size()-1));
    //     }
    //     if(count>largestsub){largestsub = count;count=0;}
    //   }
    // }
    // }
    // return largestsub;
    //return b.size();
//     int count = 0;
//     int j = 0;
// while(Math.abs(a.get(j)-a.get(j+1))<=1){
//     count++;
//     j++;
// }
// return count;
    int max = -1;
        Collections.sort(a);
        for(int i=0;i<a.size()-1;i++){
            int count = 1;
            for(int j=i+1;j<a.size();j++){
                int sum = a.get(j)-a.get(i);
                if(sum<=1){
                    count++;
                }
                max = Math.max(count,max);
                // res = Math.max(res,max);
            }
            
        }
        return max;
    }

}



// find maximum sum of priced keyboard and drive within budget b
// 9/16 test cases fail, I think I need to put sums in array then find max using collections
// and that worked! I'm sure I could clean this up a little but this is good enough to move on to the next challenge
static int getMoneySpent(int[] keyboards, int[] drives, int b) {
        /*
         * Write your code here.
         */
         //Arrays.sort(keyboards);
        //Arrays.sort(drives);
        List<Integer> sums = new ArrayList<Integer>();
         
         for(int j=keyboards.length-1;j>0;j--){
         for(int i=drives.length-1;i>0;i--){
             if(keyboards[j]+drives[i]<=b){
                 sums.add(keyboards[j]+drives[i]);
             }
         }
         
         }
         
         
         
         if(sums.size()>0){
             int buy = Collections.max(sums);
             return buy;
         }else{
             return -1;
         }





 //return shortest number of pages to turn to reach page p starting from front or back
//kind of messy but passes all tests   
    public static int pageCount(int n, int p) {
    // Write your code here
    int f = p/2;
    int b = (n-p)/2;
    if (f<1) f=0;
    if(p%2!=0&&n-p==1){b=1;}else if (b<1||n-p==0){ b=0;}
    if (f>b) return b; return f;

    }


//break up candy bar m consecutive blocks that add up to d, how many times?
// birthday bar, Algorithms, Implementation, Subarray Division
// need to fix 4 test cases, I thought I might need an equals sign in there
 public static int birthday(List<Integer> s, int d, int m) {
    // Write your code here
    int c=0;
    

    for(int j=0;j<=s.size()-m;j++){
        int sum = 0;
    for(int i=j;i<m+j;i++){
        sum+=s.get(i);
    }
    if(sum==d){
            c++;
        
    }
    }
    
    return c;
    }

}


//counting valleys, remember single quotes for chars,
    public static int countingValleys(int steps, String path) {
    // Write your code here
int level=0;
int count=0;

for(int i=0;i<path.length();i++){
    if(path.charAt(i)=='D'){
        level--;
    }else{
        level++;
        if(level==0){
            count++;
        }
    }
}
  return count;
    }




//which cat will reach the mouse first
static String catAndMouse(int x, int y, int z) {

        if(Math.abs(x-z)<Math.abs(y-z)){
            return "Cat A";
        }else if(Math.abs(y-z)<Math.abs(x-z)){
            return "Cat B";
        }else{
            return "Mouse C";
        }
    }

//this example made it easy https://www.tutorialspoint.com/java/math/biginteger_isprobableprime.htm
BigInteger bi1;
bi1 = new BigInteger(n);
        bufferedReader.close();
        if(bi1.isProbablePrime(1)){
            System.out.println("prime");
        }else{
            System.out.println("not prime");
        }
        
//stuck on this one, getting mostly right, count consecutive subarrays that have negative sum making it harder than it needs to be
ArrayList<Integer> A = new ArrayList<Integer>();
        ArrayList<Integer> ni = new ArrayList<Integer>();
        Scanner scanner = new Scanner(System.in);

int n = scanner.nextInt();
for(int e=0;e<n;e++){
    int ae = scanner.nextInt();
    A.add(ae);
}

scanner.close();

        int np=0;
   
        ArrayList<Integer> sub = new ArrayList<Integer>();
        for(int j=0;j<n;j++){
            int sum = 0;
           
            for(int k=j;k<n;k++){
                
                
                sum+=A.get(k);
                
                if(sum<0){
                    np++;
                               
                 
                }
            }
        }
System.out.println(np);





//find number of pairs in array are divisible by k
    public static int divisibleSumPairs(int n, int k, List<Integer> ar) {
    // Write your code here
int pairs = 0;

for(int i=0;i<n;i++){
    for(int j=i+1;j<n;j++){
        if((ar.get(i)+ar.get(j))%k==0){
            pairs+=1;
        }
    }
 
}
   return pairs;
    }

}



// Java Prep Java List
//Just started need to accomodate varying number of queries
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
       Scanner in = new Scanner(System.in);
//        5
// 12 0 1 78 12
// 2
// Insert
// 5 23
// Delete
// 0 print out result one line of integers separated by space

int n = in.nextInt(); //# in array
String arr = in.nextLine(); // array
int q = in.nextInt(); // # of commands to perform
String a1 = in.nextLine(); // word command
String a1index = in.nextLine(); // index and num to perform
String a2 = in.nextLine(); // 2nd word command
int a2index = in.nextInt(); // index
String[] a1a = a1index.split(" ");

ArrayList<Integer> ial = new ArrayList<Integer>();
String[] ia = arr.split(" ");
String v = "";
for(int i=0;i<ia.length;i++){
    v = ia[i];
    ial.add(Integer.parseInt(v));
}
if(a1.equals("Insert")){
ial.set(Integer.parseInt(a1a[0]),Integer.parseInt(a1a[1]));
ial.set(Integer.parseInt(a1a[0]),Integer.parseInt(a1a[1]));
}
if(a2.equals("Delete")){
ial.remove(a2index);
}

for(int j=0;j<ial.size();j++){
System.out.print(ial.get(j));
if(j<ial.size()){
    System.out.print(" ");
}
}




    }
}








//really tough 'easy' one with priority queue
public static int cookies(int k, List<Integer> A) {
    // Write your code here
    int numCookies = A.size();
        int minSweetness = k;
     int count = 0;
        PriorityQueue<Integer> he = new PriorityQueue<Integer>(numCookies);
        for(int i = 0; i < numCookies; i++){
            int sweetness = A.get(i);
            he.add(sweetness);
        }
        while(he.peek() < minSweetness && he.size() > 1){
            int ne = he.poll() + 2*he.poll();
            he.add(ne);
            count++;
        }
        if(he.peek() >= minSweetness){
            return count;
        } else{
            return -1;
         }
//  Collections.sort(A);
//     int c=0;
//     int ls1 = A.get(0);
//     int ls2 = 0;
//     while(ls1<=k&&ls2<=k){
//      //Collections.sort(A);
//      ls1 = Collections.min(A);//A.get(0);
//      A.remove(A.indexOf(ls1));
//      ls2 = Collections.min(A);//A.get(1);
//      //A.remove(0);
//      A.remove(A.indexOf(ls2));
//      A.add(ls1+2*ls2);
//      c++;  
//     //    if(c>100500){
//     //     return -1;
//     // } 
//     }
  
// return c-1;
    }





  
  public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
    int count=0;
    List<Integer> ia = new ArrayList<Integer>();
    
for(int i=0;i<queries.size();i++){
    for(int j=0;j<strings.size();j++){
        if(queries.get(i).equals(strings.get(j))){
            count++;
        }
    }
    ia.add(count);
    count=0;
}
return ia;
    } 
  
  
  
  
  //Rotate d times to the left in array arr
     public static List<Integer> rotateLeft(int d, List<Integer> arr) {
    // Write your code here
    
    d = d%arr.size();
      int x;
      for(int i=0;i<d;i++){
         x=arr.get(0);
         arr.remove(arr.get(0));
         arr.add(x);
      }
      return arr;
  
  
  
  
  
  //8 of 10 test cases passed 
     public static List<Integer> rotateLeft(int d, List<Integer> arr) {
    // Write your code here
    int temp1 = 0;
    int temp2 = 0;
            for(int i=0;i<d;i++){
                for(int j=arr.size()-1;j>=0;j--){
                    int p = 0;
                    if(j==0){
                        p=arr.size()-1;
                    }else{
                        p=j-1;
                    }
                    if(j==arr.size()-1){
                       temp1=arr.get(j); 
                        temp2=arr.get(p);
                    arr.set(p,temp1);
                    
                    }else{
                       temp1=temp2; 
                        temp2=arr.get(p);
                    arr.set(p,temp1);
                    
                    }
                
                    
                    
                }
            }
            return arr;
    }
   
   
   
   
   
   
   
    public static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
    // Write your code here
int lastAnswer = 0;
int idx = (x+lastAnswer)%n;
int[][] arr = new int[n][n];



    }